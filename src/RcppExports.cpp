// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// simplesim_rcpp
SEXP simplesim_rcpp(int ss, int sites, double rec, const std::string growthmod);
RcppExport SEXP ARG_simplesim_rcpp(SEXP ssSEXP, SEXP sitesSEXP, SEXP recSEXP, SEXP growthmodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< int >::type sites(sitesSEXP);
    Rcpp::traits::input_parameter< double >::type rec(recSEXP);
    Rcpp::traits::input_parameter< const std::string >::type growthmod(growthmodSEXP);
    rcpp_result_gen = Rcpp::wrap(simplesim_rcpp(ss, sites, rec, growthmod));
    return rcpp_result_gen;
END_RCPP
}
// treeheight
Rcpp::NumericVector treeheight(SEXP ptr);
RcppExport SEXP ARG_treeheight(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(treeheight(ptr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"ARG_simplesim_rcpp", (DL_FUNC) &ARG_simplesim_rcpp, 4},
    {"ARG_treeheight", (DL_FUNC) &ARG_treeheight, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ARG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
